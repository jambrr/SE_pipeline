# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"
  config.vm.hostname = "integration-server"
  
  ENV['LC_ALL']="en_US.UTF-8"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 8088, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 8088, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.9"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./data", "/vagrant_data"
  config.vm.synced_folder "./data", "/home/vagrant/shared"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
   	  # vb.gui = true
  
     # Customize the amount of memory on the VM:
        vb.memory = "8012"
    	vb.cpus = 4
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.	
  
  config.vm.provision "shell", inline: <<-SHELL
     	sudo apt-get update
# 	     echo "Create ssh key"   
# 	     ssh-keygen -t rsa -N '' -f /home/vagrant/.ssh/id_rsa_stage

# 		ssh_config=$(cat <<EOF
# 		        Host stage-vm
# 		        User vagrant
# 		        Hostname 192.168.33.7
# 		        IdentityFile /home/vagrant/.ssh/id_rsa_stage

# EOF
# )

# 		echo "$ssh_config" > /home/vagrant/.ssh/config
# 		#mv /home/vagrant/.ssh/id_rsa_stage.pub /vagrant_data
# 		scp vagrant@192.168.33.7:/home/vagrant/.ssh/id_rsa_stage.pub /home/vagrant/.ssh/authorized_keys

	echo "Install default Java and OpenJDK"
	sudo apt install default-jre -y
	sudo apt-get install openjdk-8-jdk -y
	
	echo "Install MySql server"
	export DEBIAN_FRONTEND="noninteractive"
	sudo debconf-set-selections <<< "mysql-server mysql-server/root_password password 12345678"
	sudo debconf-set-selections <<< "mysql-server mysql-server/root_password_again password 12345678"
	sudo apt-get install -y mysql-server
	sudo apt-get install make
	
	# Install Node.js 15.14.0
	curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/nodesource-archive-keyring.gpg
	echo "deb [signed-by=/usr/share/keyrings/nodesource-archive-keyring.gpg] https://deb.nodesource.com/node_15.x bionic main" | sudo tee /etc/apt/sources.list.d/nodesource.list
	echo "deb-src [signed-by=/usr/share/keyrings/nodesource-archive-keyring.gpg] https://deb.nodesource.com/node_15.x bionic main" | sudo tee -a /etc/apt/sources.list.d/nodesource.list
	sudo apt-get update
	sudo apt-get install -y nodejs
	
	# Install Gradle 6.7.1
	sudo apt-get install -y wget unzip
	wget https://services.gradle.org/distributions/gradle-6.7.1-bin.zip
	sudo mkdir /opt/gradle
	sudo unzip -d /opt/gradle gradle-6.7.1-bin.zip
	echo 'export PATH=$PATH:/opt/gradle/gradle-6.7.1/bin' | sudo tee -a /home/vagrant/.bashrc
	echo 'export PATH=$PATH:/opt/gradle/gradle-6.7.1/bin' | sudo tee -a /root/.bashrc
	source ~/.bashrc
	
	# Specify database location and credentials in application.properties
	echo "spring.datasource.url=jdbc:mysql://localhost:3306/e4l" | sudo tee -a /lu.uni.e4l.platform.api.dev/src/main/resources/application.properties
	echo "spring.datasource.username=root" | sudo tee -a /lu.uni.e4l.platform.api.dev/src/main/resources/application.properties
	echo "spring.datasource.password=12345678" | sudo tee -a /lu.uni.e4l.platform.api.dev/src/main/resources/application.properties
	echo "spring.datasource.url=jdbc:mysql://localhost:3306/e4l?serverTimezone=UTC" | sudo tee -a /lu.uni.e4l.platform.api.dev/src/main/resources/application.properties
	
	# Create the database "e4l" in MySQL
	mysql -u root -p12345678 -e "CREATE DATABASE e4l;"

	sudo apt-get update
     	sudo apt-get install --yes python
     	# apt-get install -y default-jre
  	# apt-get install -y apache2
  	
  	sudo apt-get install gitlab-rails
  	
  	sudo apt-get install curl
	curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash
	sudo apt-get install gitlab-ee

	curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash

	sudo apt-get install gitlab-runner
   	SHELL
   
  config.vm.provision "ansible" do |ansible|
    	ansible.playbook = "./playbook/playbook.yml"
	ansible.compatibility_mode = "auto"
  end
   
   
end
